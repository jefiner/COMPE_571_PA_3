#include <stdio.h>
#include <stdlib.h>

void main()
{
    FILE *myfile;

    int number_of_task = 5;
    int number_of_task_1 = 6;
    int table [6][7];
    char str[2][5];
    double deadline[number_of_task];
    double WCET_1188[number_of_task];
    double WCET_918[number_of_task];
    double WCET_648[number_of_task];
    double WCET_384[number_of_task];

    double w1_task[number_of_task_1];
    double w2_task[number_of_task_1];
    double w3_task[number_of_task_1];
    double w4_task[number_of_task_1];
    double w5_task[number_of_task_1];
    

    int task;
    int total_time_unit;
    int active_CPU_power_1188;
    int active_CPU_power_918;
    int active_CPU_power_648;
    int active_CPU_power_384;
    int idle_power;

    if((myfile = fopen("PA3_input1.txt", "r")) == NULL)
    {
        printf("cannot locate file\n");
    }
    else 
    {
        for (int j = 0; j < 7; j++)
        {
            fscanf(myfile, "%d", &table[0][j]);
        }
        task = table[0][0];
        total_time_unit = table[0][1];
        active_CPU_power_1188 = table[0][2];
        active_CPU_power_918 = table[0][3];
        active_CPU_power_648 = table[0][4];
        active_CPU_power_384 = table[0][5];
        idle_power = table[0][6];

        printf("\n------------------ Current Data -----------------------\n\n");
        printf("Task: %d\n", task);
        printf("Total Time Unit: %d\n", total_time_unit);
        printf("Active CPU power @ 1188: %d\n", active_CPU_power_1188);
        printf("Active CPU power @ 918: %d\n", active_CPU_power_918);
        printf("Active CPU power @ 648: %d\n", active_CPU_power_648);
        printf("Active CPU power @ 384: %d\n", active_CPU_power_384);
        printf("IDLE power: %d\n", idle_power);

        for (int i = 1; i < 6; i++)
        {
            fscanf(myfile, "%s", &str[1][i-1]);

            for(int j = 1; j < 6; j++)
            {
                fscanf(myfile, "%d", &table[i][j]);
            }
        }

        printf("\n------------------Deadline -----------------------\n\n");
        for (int k = 0; k < 5; k++) //deadline
        {
            deadline[k] = table[k+1][1];
            printf("W%d: deadline at [%d][2] is: %f\n", (k+1), (k+1), deadline[k]);
        }
        printf("\n----------------WCET 1188--------------------\n\n");
        for (int k = 0; k < 5; k++) //Execution time
        {
            WCET_1188[k] = table[k+1][2];
            printf("W%d: exection time at [%d][3] is: %f\n", (k+1), (k+1), WCET_1188[k]);
        }
        printf("\n---------------- WCET 918 --------------------\n\n");
        for (int k = 0; k < 5; k++)
        {
            WCET_918[k] = table[k+1][3];
            printf("W%d: exection time at [%d][4] is: %f\n", (k+1), (k+1), WCET_918[k]);
        }
        printf("\n---------------- WCET 648 --------------------\n\n");
        for(int k = 0; k < 5; k++)
        {
            WCET_648[k] = table[k+1][4];
            printf("W%d: exection time at [%d][5] is: %f\n", (k+1), (k+1), WCET_648[k]);
        }
        printf("\n---------------- WCET 384 --------------------\n\n");
        for(int k = 0; k < 5; k++)
        {
            WCET_384[k] = table[k+1][5];
            printf("W%d: exection time at [%d][6] is: %f\n", (k+1), (k+1), WCET_384[k]);
        }
        printf("\n"); 
        for(int k = 0; k < 4; k++)
        {
            w1_task[k] = table[1][k+2];
            //printf("Task W1_Task is: %f\n", w1_task[k]);
        }
        //printf("-------------------------------------------------------------\n");
        for (int k = 0; k < 4; k++)
        {
            w2_task[k] = table[2][k+2];
            //printf("Task W2_task is %f\n", w2_task[k]);
        }
        //printf("-------------------------------------------------------------\n");

        for(int k = 0; k < 4; k++)
        {
            w3_task[k] = table[3][k+2];
           // printf("Task W3_task is %f\n", w3_task[k]);

        }
       // printf("-------------------------------------------------------------\n");

        for (int k = 0; k < 4; k++)
        {
            w4_task[k] = table[4][k+2];
            //printf("Task W4_task is %f\n", w4_task[k]);
        }
        //printf("-------------------------------------------------------------\n");

        for(int k = 0; k < 4; k++)
        {
            w5_task[k] = table[5][k+2];
            //printf("Task W5_task is %f\n", w5_task[k]);
        }
        //printf("-------------------------------------------------------------\n");

    }
    double val1, val2, val3, val4, val5 = 0; 
    double task1, task2, task3, task4, task5 = 0;
    double freq1, freq2, freq3, freq4 = 0;
    double greatest = 0.0;
    double total = 0.0;
    for (int w1 = 0; w1 < 4; w1++)
    {
        val1 = (w1_task[w1]/deadline[0]);
        for(int w2 = 0; w2 < 4; w2++)
        {
            val2 = (w2_task[w2]/deadline[1]);
            for (int w3 = 0; w3 < 4; w3++)
            {
                val3 = (w3_task[w3]/deadline[2]);
                for (int w4 = 0; w4 < 4; w4++)
                {
                    val4 = (w4_task[w4]/deadline[3]);

                    for (int w5 = 0; w5 < 4; w5++)
                    {
                        val5 = (w5_task[w5]/deadline[4]);
                        total = val1 + val2 + val3 + val4 + val5;
                        if ((total < 1) && (total > greatest))
                        {
                            greatest = total;
                            task1 = w1_task[w1];
                            task2 = w2_task[w2];
                            task3 = w3_task[w3];
                            task4 = w4_task[w4];
                            task5 = w5_task[w5];                            
                        }
                    }
                }
            }
        }
    }
    printf ("Greatest value: %f\n\n", greatest);
    printf("Task 1: %f\n", task1);
    printf("Task 2: %f\n", task2);
    printf("Task 3: %f\n", task3);
    printf("Task 4: %f\n", task4);
    printf("Task 5: %f\n\n", task5);


    fclose(myfile);
    
    int total_time = 1;
    int workload1 = 1;
    int workload2 = 1;
    int workload3 = 1;
    int workload4 = 1;
    int workload5 = 1;
    int new_execution_time;
    int execution1 = WCET_1188[0];
    int execution2 = WCET_1188[1];
    int execution3 = WCET_1188[2];
    int execution4 = WCET_1188[3];
    int execution5 = WCET_1188[4];
    int new_execution1 = WCET_1188[0];
    int new_execution2 = WCET_1188[1];
    int new_execution3 = WCET_1188[2];
    int new_execution4 = WCET_1188[3];
    int new_execution5 = WCET_1188[4];
    int deadline1 = deadline[0];
    int deadline2 = deadline[1];
    int deadline3 = deadline[2];
    int deadline4 = deadline[3];
    int deadline5 = deadline[4];
    int next_deadline1 = deadline[0];
    int next_deadline2 = deadline[1];
    int next_deadline3 = deadline[2];
    int next_deadline4 = deadline[3];
    int next_deadline5 = deadline[4];

    double summation = 0.0;
    
    for (int i = 0; i < 5; ++i)
    {
        summation += (WCET_1188[i])/(deadline[i]);
    }

    if(summation > 1)
    {
        printf("An EDF schedule is NOT feasible for this input\n");
        printf("The Summation is: %f > 1\n", summation);
        exit(1);
    }

    else
    {
        printf("An EDF schedule is feasible for this input\n");
        printf("The Summation is: %f < 1\n", summation);
    
        while (total_time < total_time_unit) 
        {
            if (workload1 <= total_time) { //if start time is less than 1000
                if ((next_deadline1 <= next_deadline2) && (next_deadline1 <= next_deadline3) && (next_deadline1 <= next_deadline4) && (next_deadline1 <= next_deadline5)) //if w1 has earliest deadline
                { 
                    new_execution_time = new_execution1;
                    printf("%d w1 1188 %d\n", total_time, new_execution_time);
                    total_time += new_execution_time;
                    new_execution1 = execution1;
                    workload1 += deadline1; //cant start until after deadline
                    next_deadline1 += deadline1; //next deadline
                }
                else if (((workload2 > total_time) || (next_deadline1 <= next_deadline2)) && ((workload3 > total_time) || (next_deadline1 <= next_deadline3)) && ((workload4 > total_time) || (next_deadline1 <= next_deadline4)) && ((workload5 > total_time) || (next_deadline1 <= next_deadline5))) {
                    if (((workload2 <= workload3) || (workload3 <= total_time)) && ((workload2 <= workload4) || (workload4 <= total_time)) && ((workload2 <= workload5) || (workload5 <= total_time)) && (workload2 > total_time) && (next_deadline2 <= next_deadline1)) {
                        new_execution_time = workload2 - total_time;
                    }
                    else if (((workload3 <= workload2) || (workload2 <= total_time)) &&((workload3 <= workload4) || (workload4 <= total_time)) && ((workload3 <= workload5) || (workload5 <= total_time)) && (workload3 > total_time) && (next_deadline3 <= next_deadline1)) {//(  {
                        new_execution_time = workload3 - total_time;
                    }
                    else if (((workload4 <= workload2) || (workload2 <= total_time))  && ((workload4 <= workload3) || (workload3 <= total_time)) && ((workload4 <= workload5) || (workload5 <= total_time)) && (workload4 > total_time) && (next_deadline4 <= next_deadline1)) {//(((workload4 <= workload5) || (workload5 <= total_time)) && (workload4 > total_time) && (next_deadline4 < next_deadline1)) {//
                        new_execution_time = workload4 - total_time;
                    }
                    else if (((workload5 <= workload2) || (workload2 <= total_time)) && ((workload5 <= workload3) || (workload3 <= total_time)) && ((workload5 <= workload4) || (workload4 <= total_time)) && (workload5 > total_time) && (next_deadline5 <= next_deadline1)) { //((workload5 > total_time) && (next_deadline5 < next_deadline1)) { //
                        new_execution_time = workload5 - total_time;
                    }
                    
                    if (new_execution_time >= new_execution1) {
                        new_execution_time = new_execution1;
                        printf("%d w1 1188 %d\n", total_time, new_execution_time);
                        total_time += new_execution_time; //update total time with execution time
                        new_execution1 = execution1;
                        workload1 += deadline1; //cant start until after deadline
                        next_deadline1 += deadline1; //next deadline
                    }
                    else {
                        printf("%d w1 1188 %d\n", total_time, new_execution_time);
                        total_time += new_execution_time;
                        new_execution1 = new_execution1 - new_execution_time;
                    }
                    
                }
                
            }
            if (workload2 <= total_time) 
            {
                if ((next_deadline2 <= next_deadline1) && (next_deadline2 <= next_deadline3) && (next_deadline2 <= next_deadline4) && (next_deadline2 <= next_deadline5)) 
                {
                    new_execution_time = new_execution2;
                    printf("%d w2 1188 %d\n", total_time, new_execution_time);
                    total_time += new_execution_time;
                    new_execution2 = execution2;
                    workload2 += deadline2;
                    next_deadline2 += deadline2;
                }
                else if (((workload1 > total_time) || (next_deadline2 <= next_deadline1)) && ((workload3 > total_time) || (next_deadline2 <= next_deadline3)) && ((workload4 > total_time) || (next_deadline2 <= next_deadline4)) && ((workload5 > total_time) || (next_deadline2 <= next_deadline5))) 
                {
                    if (((workload1 <= workload3) || (workload3 <= total_time)) && ((workload1 <= workload4) || (workload4 <= total_time)) && ((workload1 <= workload5) || (workload5 <= total_time)) && (workload1 > total_time) && (next_deadline1 <= next_deadline2)) 
                    {
                        new_execution_time = workload1 - total_time;
                    }
                    else if (((workload3 <= workload1) || (workload1 <= total_time)) && ((workload3 <= workload4) || (workload4 <= total_time)) && ((workload3 <= workload5) || (workload5 <= total_time)) && (workload3 > total_time) && (next_deadline3 <= next_deadline2)) 
                    {
                        new_execution_time = workload3 - total_time;
                    }
                    else if (((workload4 <= workload1) || (workload1 <= total_time)) && ((workload4 <= workload3) || (workload3 <= total_time)) && ((workload4 <= workload5) || (workload5 <= total_time)) && (workload4 > total_time) && (next_deadline4 <= next_deadline2)) 
                    {
                        new_execution_time = workload4 - total_time;
                    }
                    else if ( ((workload5 <= workload1) || (workload1 <= total_time)) && ((workload5 <= workload3) || (workload3 <= total_time)) && ((workload5 <= workload4) || (workload4 <= total_time)) && (workload5 > total_time) && (next_deadline5 <= next_deadline2))
                    {
                        new_execution_time = workload5 - total_time;
                    }
                    
                    if (new_execution_time >= new_execution2) 
                    {
                        new_execution_time = new_execution2;
                        printf("%d w2 1188 %d\n", total_time, new_execution_time);
                        total_time += new_execution_time; //update total time with execution time
                        new_execution2 = execution2;
                        workload2 += deadline2;
                        next_deadline2 += deadline2;
                    }
                    else 
                    {
                        printf("%d w2 1188 %d\n", total_time, new_execution_time);
                        total_time += new_execution_time;
                        new_execution2 = new_execution2 - new_execution_time;
                    }
                    
                }
            }
            if (workload3 <= total_time) 
            {
                if ((next_deadline3 <= next_deadline1) && (next_deadline3 <= next_deadline2) && (next_deadline3 <= next_deadline4) && (next_deadline3 <= next_deadline5)) {
                    new_execution_time = new_execution3;
                    printf("%d w3 1188 %d\n", total_time, new_execution_time);
                    total_time += new_execution_time;
                    new_execution3 = execution3;
                    workload3 += deadline3;
                    next_deadline3 += deadline3;
                }
                else if (((workload1 > total_time) || (next_deadline3 <= next_deadline1)) && ((workload2 > total_time) || (next_deadline3 <= next_deadline2)) && ((workload4 > total_time) || (next_deadline3 <= next_deadline4)) && ((workload5 > total_time) || (next_deadline3 <= next_deadline5))) {
                    if (((workload1 <= workload2) || (workload2 <= total_time)) && ((workload1 <= workload4) || (workload4 <= total_time)) && ((workload1 <= workload5) || (workload5 <= total_time)) && (workload1 > total_time) && (next_deadline1 <= next_deadline3)) {
                        new_execution_time = workload1 - total_time;
                    }
                    else if (((workload2 <= workload1) || (workload1 <= total_time)) && ((workload2 <= workload4) || (workload4 <= total_time)) && ((workload2 <= workload5) || (workload5 <= total_time)) && (workload2 > total_time) && (next_deadline2 <= next_deadline3)) {//
                        new_execution_time = workload2 - total_time;
                    }
                    else if (((workload4 <= workload1) || (workload1 <= total_time)) && ((workload4 <= workload2) || (workload2 <= total_time)) && ((workload4 <= workload5) || (workload5 <= total_time)) && (workload4 > total_time) && (next_deadline4 <= next_deadline3)) {//
                        new_execution_time = workload4 - total_time;
                    }
                    else if ( ((workload5 <= workload1) || (workload1 <= total_time)) && ((workload5 <= workload2) || (workload2 <= total_time)) && ((workload5 <= workload4) || (workload4 <= total_time)) && (workload5 > total_time) && (next_deadline5 <= next_deadline3)) {//
                        new_execution_time = workload5 - total_time;
                    }
                    if (new_execution_time >= new_execution3) {
                        new_execution_time = new_execution3;
                        printf("%d w3 1188 %d\n", total_time, new_execution_time);
                        total_time += new_execution_time; //update total time with execution time
                        new_execution3 = execution3;
                        workload3 += deadline3;
                        next_deadline3 += deadline3;
                    }
                    else {
                        printf("%d w3 1188 %d\n", total_time, new_execution_time);
                    total_time += new_execution_time;
                        new_execution3 = new_execution3 - new_execution_time;
                    }
                    
                    
                }
                
            }
            if (workload4 <= total_time) 
            {
                if ((next_deadline4 <= next_deadline1) && (next_deadline4 <= next_deadline2) && (next_deadline4 <= next_deadline3) && (next_deadline4 <= next_deadline5)) {
                    new_execution_time = new_execution4;
                    printf("%d w4 1188 %d\n", total_time, new_execution_time);
                    total_time += new_execution_time;
                    new_execution4 = execution4;
                    workload4 += deadline4;
                    next_deadline4 += deadline4;
                }
                else if (((workload1 > total_time) || (next_deadline4 <= next_deadline1)) && ((workload2 > total_time) || (next_deadline4 <= next_deadline2)) && ((workload3 > total_time) || (next_deadline4 <= next_deadline3)) && ((workload5 > total_time) || (next_deadline4 <= next_deadline5))) {
                    if (((workload1 <= workload2) || (workload2 <= total_time)) && ((workload1 <= workload3) || (workload3 <= total_time)) && ((workload1 <= workload5) || (workload5 <= total_time)) && (workload1 > total_time) && (next_deadline1 <= next_deadline4)) {
                        new_execution_time = workload1 - total_time;
                    }
                    else if (((workload2 <= workload1) || (workload1 <= total_time)) && ((workload2 <= workload3) || (workload3 <= total_time)) && ((workload2 <= workload5) || (workload5 <= total_time)) && (workload2 > total_time) && (next_deadline2 <= next_deadline4)) {//
                        new_execution_time = workload2 - total_time;
                    }
                    else if (((workload3 <= workload1) || (workload1 <= total_time)) && ((workload3 <= workload2) || (workload2 <= total_time)) && ((workload3 <= workload5) || (workload5 <= total_time)) && (workload3 > total_time) && (next_deadline3 <= next_deadline4)) {//
                        new_execution_time = workload3 - total_time;
                    }
                    else if (((workload5 <= workload1) || (workload1 <= total_time)) && ((workload5 <= workload2) || (workload2 <= total_time)) && ((workload5 <= workload3) || (workload3 <= total_time)) &&  (workload5 > total_time) && (next_deadline5 <= next_deadline4)) {//
                        new_execution_time = workload5 - total_time;
                    }

                    //printf("new_execution_time: %d", new_execution_time);
                    //printf("new_execution4: %d", new_execution4);
                    
                    if (new_execution_time >= new_execution4) {
                        new_execution_time = new_execution4;
                        printf("%d w4 1188 %d\n", total_time, new_execution_time);
                        total_time += new_execution_time; //update total time with execution time
                        new_execution4 = execution4;
                    workload4 += deadline4;
                        next_deadline4 += deadline4;
                    }
                    else {
                        //printf("I am w4");
                        printf("%d w4 1188 %d\n", total_time, new_execution_time);
                        total_time += new_execution_time;
                        new_execution4 = new_execution4 - new_execution_time;
                    }
                    
                }
            }
            if (workload5 <= total_time) 
            {
                /*printf("next_deadline5: %d", next_deadline5);
                printf("next_deadline4: %d", next_deadline4);
                printf("next_deadline3: %d", next_deadline3);
                printf("next_deadline2: %d", next_deadline2);
                printf("next_deadline1: %d", next_deadline1);*/

                if ((next_deadline5 < next_deadline1) && (next_deadline5 < next_deadline2) && (next_deadline5 < next_deadline4) && (next_deadline5 < next_deadline3))
                {
                    new_execution_time = new_execution5; 
                    printf("%d w5 1188 %d\n", total_time, new_execution_time);
                    total_time += new_execution_time;
                    new_execution5 = execution5;
                    workload5 += deadline5;
                    next_deadline5 += deadline5;
                }
                else if (((workload1 > total_time) || (next_deadline5 <= next_deadline1)) && ((workload2 > total_time) || (next_deadline5 <= next_deadline2)) && ((workload3 > total_time) || (next_deadline5 <= next_deadline3)) && ((workload5 > total_time) || (next_deadline5 <= next_deadline4)))
                {
                    if (((workload1 <= workload2) || (workload2 <= total_time)) && ((workload1 <= workload3) || (workload3 <= total_time)) && ((workload1 <= workload4) || (workload4 <= total_time)) && (workload1 > total_time) && (next_deadline1 <= next_deadline5)) {
                        new_execution_time = workload1 - total_time;
                    }
                    else if (((workload2 <= workload1) || (workload1 <= total_time)) && ((workload2 <= workload3) || (workload3 <= total_time)) && ((workload2 <= workload4) || (workload4 <= total_time)) && (workload2 > total_time) && (next_deadline2 <= next_deadline5)) {//
                        new_execution_time = workload2 - total_time;
                    }
                    else if ( ((workload3 <= workload1) || (workload1 <= total_time)) && ((workload3 <= workload2) || (workload2 <= total_time)) &&((workload3 <= workload4) || (workload4 <= total_time)) && (workload3 > total_time) && (next_deadline3 <= next_deadline5)) {//
                        new_execution_time = workload3 - total_time;
                    }
                    else if (((workload4 <= workload1) || (workload1 <= total_time)) && ((workload4 <= workload2) || (workload2 <= total_time)) && ((workload4 <= workload3) || (workload3 <= total_time)) &&  (workload4 > total_time) && (next_deadline4 <= next_deadline5)) {//
                        new_execution_time = workload4 - total_time;
                    }
                    
                // printf("new_execution_time: %d", new_execution_time);
                // printf("new_execution5: %d", new_execution5);
                    
                    if (new_execution_time >= new_execution5)
                    {
                        new_execution_time = new_execution5;
                        printf("%d w5 1188 %d\n", total_time, new_execution_time);
                        total_time += new_execution_time; //update total time with execution time
                        new_execution5 = execution5;
                        workload5 += deadline5;
                        next_deadline5 += deadline5;
                    }
                    else 
                    {
                        printf("%d w5 1188 %d\n", total_time, new_execution_time);
                        total_time += new_execution_time;
                        new_execution5 = new_execution5 - new_execution_time;
                    }
                }
            }

            else if((workload1 > total_time) && (workload2 > total_time) && (workload3 > total_time) && (workload4 > total_time))
            {
                //printf("%d IDLE %d\n", total_time, new_execution_time);
                
                if((workload1 <= workload2) && (workload1 < workload3) && (workload1 < workload4) && (workload1 < workload5))
                {
                    new_execution_time = workload1 - total_time;
                }
                else if ((workload2 <= workload3) && (workload2 <= workload4) && (workload2 <= workload5))
                {
                    new_execution_time = workload2 - total_time;
                }
                else if ((workload3 <= workload4) && (workload3 <= workload5))
                {
                    new_execution_time = workload3 - total_time;
                }
                else if (workload4 <= workload5)
                {
                    new_execution_time = workload4 - total_time;
                }
                else 
                {
                    new_execution_time = workload5 - total_time;
                    //printf("flag 1\n");
                }
                printf("%d IDLE %d\n", total_time, new_execution_time);
                total_time += new_execution_time;
            }
        }
    }
    
}